#!/usr/bin/env python2.5
from __future__ import division
import sys
import Image
import ImageFilter as IF
import ImageEnhance as IE

image = Image.open(sys.argv[1]).convert("RGB")

maxed = image.filter(IF.MaxFilter(3))

contrastor = IE.Contrast(maxed)

contrasted = contrastor.enhance(3)

width, height = contrasted.size

image = contrasted.crop((8, 16, width - 8, height - 16))
image.save("_.png")
image = Image.open("_.png")
data = image.load()

for y in range(image.size[1]):
    for x in range(image.size[0]):
        if all(d == 255 for d in data[x, y]):
            data[x, y] = (255, 255, 255)
        else:
            data[x, y] = (0, 0, 0)

width, height = image.size

W = (255, 255, 255)

cuts = []

for x in range(image.size[0]):
    if all(data[x, y] == W for y in range(height)):
        for y in range(height):
            data[x, y] = (255, 128, 128)
        if cuts and cuts[-1][1] == x - 1:
            cuts[-1][1] = x
        else:
            cuts.append([x, x])



chunks = []

r = list(reversed([-1] + reduce(lambda a, b: a + b, cuts) + [width + 1 - 1]))

while r:
    chunks.append((r.pop() + 1, r.pop() - 1))

areas = []

for chunk in chunks:
    top = 0
    bottom = None

    for y in range(image.size[1]):
        if all(data[x, y] == W for x in range(chunk[0], chunk[1] + 1)):
            if top >= y - 1:
                top = y
            else:
                if bottom is None:
                    bottom = y
            for x in range(chunk[0], chunk[1] + 1):
                data[x, y] = (128, 128, 255)

    if chunk[1] > chunk[0]:
        areas.append((chunk[0], top + 1, chunk[1], bottom))

image.save("yo.png")


digits = map(image.crop, areas)

def average(iterable): # average darkness, actually
    list_ = list(iterable)
    return(1 - sum(list_) / len(list_) / 255)

for digit in digits:
    digit.save("_.png")
    digit = Image.open("_.png")
    
    data = digit.load()
    width, height = digit.size

    odds = [ 0 ] * 20

#    if width < 12:
#        print(1)
#        continue

    # Take 2 pixels in from each edge and
    # determine the average intensity. This should
    # give us most of what we need, I hopes.
    # Width is also good to know.

    # k, we're taking the average of (the maximum intensities
    # of the three edge pixels) of each edge to deal with some
    # variation a little better.
    
    top_line = average(min(data[x, y][0] for y in range(3)) for x in range(width))
    bottom_line = average(min(data[x, height - y - 1][0] for y in range(3)) for x in range(width))
    left_line = average(min(data[x, y][0] for x in range(3)) for y in range(height))
    right_line = average(min(data[width - x - 1, y][0] for x in range(3)) for y in range(height))

    # These are just the top and bottom halves of the left and right edges.
    right_up_line = average(min(data[width - x - 1, y][0] for x in range(3)) for y in range(height // 2))
    right_down_line = average(min(data[width - x - 1, y][0] for x in range(3)) for y in range(height // 2, height))
    left_up_line = average(min(data[x, y][0] for x in range(3)) for y in range(height // 2))
    left_down_line = average(min(data[x, y][0] for x in range(3)) for y in range(height // 2, height))

    # The center, excluding the top and bottom two pixels

    middle_line = average(min(data[width // 2 + o, y][0] for o in range(-2, 3)) for y in range(2, height - 3))
    middler_line = average(min(data[width // 2 + o, y][0] for o in range(-2, 3)) for y in range(5, height - 6))
    
#    mid_top = average(data[width // 2 + o, (height * 3) // 4 + o][0] for o in (-2, -1, 0, +1, +2))
#    mid_bottom = average(data[width // 2 + o, (height) // 4 + o][0] for o in (-2. -1, 0, +1, +2))
    
    if top_line > .9 and bottom_line < .5 and left_line < .3 and right_line > .4:
        print(7)
        continue

    if right_line > .8 and left_line < .25 and bottom_line < .3:
        print(1)
        continue

    if right_line > .9 and left_line < .4 and top_line < .6 and bottom_line < .35:
        print(4)
        continue
    
    if left_down_line < .45 and all(v > .6 for v in (right_down_line, left_up_line)):
        print(5)
        continue

    if .6 < left_down_line < right_down_line and all(v > .6 for v in (right_up_line, left_up_line, top_line)):
        print(9)
        continue


    if top_line > .8 and bottom_line > .8 and right_line > .7 and left_line > .7 and middle_line < .25:
        if middler_line > .3:
            print(8)
        else:
            print(0)
        continue



    
    print "Dunno, but it's t %.2f  b %.2f  l %.2f  r %.2f" % (top_line, bottom_line, left_line, right_line)
    print "     mid %.2f     lu %.2f ld %.2f ru %.2f rd %.2d" % (middle_line, left_up_line, left_down_line, right_up_line, right_down_line)
#    print "               tm %.2f         bm %.2f" % (mid_top, mid_bottom)

# Correct is 72791




